// Generated by CoffeeScript 1.4.0
(function() {
  var $, Camera, Entity, Game, GroundModel, InputHandler, Key, Level, LevelGenerator, List, Loader, Map, MapGenerator, Model, PlayerModel, Screen, SimpleImageLoader, SimpleJSONLoader, SpriteSheet, Storage, TeleporterModel, TestEntity, Text,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  Entity = (function() {

    function Entity(x, y) {
      this.x = x;
      this.y = y;
    }

    Entity.prototype.render = function(screen) {};

    Entity.prototype.tick = function() {};

    Entity.prototype.setX = function(x) {
      return this.x = x;
    };

    Entity.prototype.setY = function(y) {
      return this.y = y;
    };

    return Entity;

  })();

  TestEntity = (function(_super) {

    __extends(TestEntity, _super);

    function TestEntity(x, y) {
      this.x = x;
      this.y = y;
      TestEntity.__super__.constructor.call(this, this.x, this.y);
      this.tile = 16;
    }

    TestEntity.prototype.render = function(screen) {
      return screen.render(this.x, this.y, this.tile);
    };

    TestEntity.prototype.tick = function() {};

    return TestEntity;

  })(Entity);

  Model = (function() {

    function Model(world) {
      this.world = world;
      this.body;
    }

    Model.prototype.getX = function() {
      return this.body.GetPosition().x;
    };

    Model.prototype.getY = function() {
      return this.body.GetPosition().y;
    };

    Model.prototype.setPosition = function(x, y) {
      return this.body.SetPosition(new b2Vec2(x, y), 0);
    };

    Model.prototype.getBody = function() {
      return this.body;
    };

    return Model;

  })();

  PlayerModel = (function(_super) {

    __extends(PlayerModel, _super);

    function PlayerModel(world, x, y) {
      this.world = world;
      this.x = x;
      this.y = y;
      this.scale = SCALE;
      this.height = 12 / this.scale;
      this.width = 12 / this.scale;
      console.log(this.width, this.height);
      this.fixDef = new b2FixtureDef;
      this.fixDef.density = 0.1;
      this.fixDef.friction = 0.3;
      this.fixDef.restitution = 0.4;
      this.bodyDef = new b2BodyDef;
      this.bodyDef.type = b2Body.b2_dynamicBody;
      this.bodyDef.position.x = this.x / this.scale - 6 / this.scale;
      this.bodyDef.position.y = this.y / this.scale;
      this.fixDef.shape = new b2PolygonShape;
      this.fixDef.shape.SetAsBox(this.width, this.height);
      this.body = this.world.CreateBody(this.bodyDef);
      this.fixDef = this.body.CreateFixture(this.fixDef);
    }

    PlayerModel.prototype.getScreenX = function() {
      return (this.body.GetPosition().x - this.width) * this.scale;
    };

    PlayerModel.prototype.getScreenY = function() {
      return (this.body.GetPosition().y - this.height) * this.scale;
    };

    return PlayerModel;

  })(Model);

  GroundModel = (function(_super) {

    __extends(GroundModel, _super);

    function GroundModel(world, game) {
      this.world = world;
      this.game = game;
      this.width = this.game.width;
      this.height = this.game.height;
      this.scale = this.game.scale;
      this.fixDef = new b2FixtureDef;
      this.fixDef.density = 0.1;
      this.fixDef.friction = 0.3;
      this.fixDef.restitution = 0.4;
      this.bodyDef = new b2BodyDef;
      this.bodyDef.type = b2Body.b2_staticBody;
      this.bodyDef.position.x = this.width / this.scale / 2;
      this.bodyDef.position.y = 250 / this.scale / 2;
      this.fixDef.shape = new b2PolygonShape;
      this.fixDef.shape.SetAsBox((2000 / this.scale) / 2, (8 / this.scale) / 2);
      this.body = this.world.CreateBody(this.bodyDef);
      this.body.CreateFixture(this.fixDef);
    }

    return GroundModel;

  })(Model);

  TeleporterModel = (function(_super) {

    __extends(TeleporterModel, _super);

    function TeleporterModel(world, game, x, y) {
      this.world = world;
      this.game = game;
      this.x = x;
      this.y = y;
      this.scale = this.game.scale;
      this.sensor = new b2FixtureDef;
      this.sensor.shape = new b2PolygonShape;
      this.sensor.shape.SetAsBox((25 / this.scale) / 2, (10 / this.scale) / 2);
      this.sensor.isSensor = true;
      this.bodyDef = new b2BodyDef;
      this.bodyDef.type = b2Body.b2_staticBody;
      this.bodyDef.position.x = 160 / this.scale / 2;
      this.bodyDef.position.y = (300 - 20) / this.scale / 2;
      this.body = this.world.CreateBody(this.bodyDef);
      this.sensor = this.body.CreateFixture(this.sensor);
    }

    return TeleporterModel;

  })(Model);

  $ = Zepto;

  $(function() {
    var game, l1, l2, l3, l4;
    this.b2Vec2 = Box2D.Common.Math.b2Vec2;
    this.b2BodyDef = Box2D.Dynamics.b2BodyDef;
    this.b2Body = Box2D.Dynamics.b2Body;
    this.b2FixtureDef = Box2D.Dynamics.b2FixtureDef;
    this.b2Fixture = Box2D.Dynamics.b2Fixture;
    this.b2World = Box2D.Dynamics.b2World;
    this.b2MassData = Box2D.Collision.Shapes.b2MassData;
    this.b2PolygonShape = Box2D.Collision.Shapes.b2PolygonShape;
    this.b2CircleShape = Box2D.Collision.Shapes.b2CircleShape;
    this.b2DebugDraw = Box2D.Dynamics.b2DebugDraw;
    this.WIDTH = 640.0;
    this.HEIGHT = 480.0;
    this.SCALE = 30;
    this.STORAGE = new Storage();
    
    l1 = new SimpleImageLoader("img/sprites.png", "spritesheet");
    l2 = new SimpleJSONLoader("img/map.json", "map");
    l3 = new SimpleJSONLoader("level/test.json", "test");
    l4 = new SimpleJSONLoader("level/level2.json", "test2");
    STORAGE.register(l1);
    STORAGE.register(l2);
    STORAGE.register(l3);
    STORAGE.register(l4);
    l1.start();
    l2.start();
    l3.start();
    l4.start();
    
    game = new Game();
    return this.STORAGE.setFinished(game.init);
    
  });

  Game = (function() {

    function Game() {
      this.run = __bind(this.run, this);

      this.beginContacts = __bind(this.beginContacts, this);

      this.init = __bind(this.init, this);
      console.log("CREATE Game");
      this.scale = 30;
    }

    Game.prototype.init = function() {
      var debugDraw;
      console.log("INIT Game");
      this.world = new b2World(new b2Vec2(0, 10), true);
      debugDraw = new b2DebugDraw();
      debugDraw.SetSprite(document.getElementById("board").getContext("2d"));
      debugDraw.SetDrawScale(this.scale);
      debugDraw.SetFillAlpha(0.8);
      debugDraw.SetAlpha(1);
      debugDraw.SetLineThickness(1.0);
      debugDraw.SetFlags(b2DebugDraw.e_shapeBit | b2DebugDraw.e_jointBit);
      this.world.SetDebugDraw(debugDraw);
      this.screen = new Screen("board", STORAGE.getRessource("spritesheet"));
      this.inputHandler = new InputHandler;
      this.map = new Map("map", this, this.inputHandler);
      this.camera = new Camera(this.world, 30, 5, this.inputHandler);
      this.level = null;
      this.levels = [new Level("board", this.world, this.screen, STORAGE.getRessource("test"), STORAGE.getRessource("spritesheet")), new Level("board", this.world, this.screen, STORAGE.getRessource("test2"), STORAGE.getRessource("spritesheet"))];
      return this.run();
    };

    Game.prototype.loadLevel = function(index) {
      this.level = this.levels[index];
      return impress().goto("game");
    };

    Game.prototype.beginContacts = function(begin, manifold) {
      return console.log("contact");
    };

    Game.prototype.run = function() {
      this.tick();
      this.render();
      return window.requestAnimFrame(this.run);
    };

    Game.prototype.tick = function() {
      this.world.Step(1 / 60, 10, 10);
      this.world.ClearForces();
      this.map.tick();
      this.camera.tick();
      if (this.level != null) {
        return this.level.tick();
      }
    };

    Game.prototype.render = function() {
      this.screen.clear();
      this.world.DrawDebugData();
      if (this.level != null) {
        this.level.draw(this.camera.getXoffset(), 0);
      }
      this.screen.draw();
      return this.map.draw();
    };

    return Game;

  })();

  Screen = (function() {

    function Screen(id, img) {
      this.id = id;
      this.context = document.getElementById(this.id).getContext("2d");
      this.canvas = document.createElement("canvas");
      this.canvas.width = 640 / 3;
      this.canvas.height = 480 / 3;
      this.ctx = this.canvas.getContext("2d");
      this.spritesheet = new SpriteSheet(img, 8);
    }

    Screen.prototype.render = function(x, y, tile) {
      return this.spritesheet.drawTile(this.ctx, x / 3, y / 3, tile);
    };

    Screen.prototype.draw = function() {
      return this.context.drawImage(this.canvas, 0, 0, 640, 480);
    };

    Screen.prototype.clear = function() {
      return this.ctx.clearRect(0, 0, 640, 480);
    };

    return Screen;

  })();

  Text = (function() {
    var chooseColor, color;

    chooseColor = "#FF00FF";

    color = "#FFF";

    function Text(value, x, y, actual) {
      this.value = value;
      this.x = x;
      this.y = y;
      this.actual = actual;
    }

    Text.prototype.draw = function(ctx) {
      ctx.fillStyle = this.actual ? chooseColor : color;
      return ctx.fillText(this.value, this.x, this.y);
    };

    return Text;

  })();

  Map = (function() {

    function Map(id, game, inputHandler) {
      this.id = id;
      this.game = game;
      this.inputHandler = inputHandler;
      console.log("INIT Map");
      this.actualText = 0;
      this["do"] = 0;
      this.texts = [new Text("Level 1", 16 * 4, (16 * 4) - 4, true), new Text("Level 2", 6 * 8 * 4, (8 * 13 * 4) + 4, false), new Text("Level 3", 11 * 8 * 4, (8 * 2 * 4) - 4, false), new Text("Final", 15 * 8 * 4, (12 * 8 * 4) - 4, false)];
      this.canvas = document.getElementById(this.id);
      this.canvas.width = WIDTH;
      this.canvas.height = HEIGHT;
      this.ctx = this.canvas.getContext("2d");
      this.ctx.webkitImageSmoothingEnabled = false;
      this.ctx.mozImageSmoothingEnabled = false;
      this.ctx.font = "normal 36px Arial";
      this.ctx.fillStyle = "#FFF";
      this.mapgen = new MapGenerator(STORAGE.getRessource("map"), STORAGE.getRessource("spritesheet"));
    }

    Map.prototype.tick = function() {
      if (this.inputHandler.RIGHT.isPressed()) {
        if (this.actualText < 3) {
          this["do"] = 1;
        }
      } else {
        if (this["do"] === 1) {
          this.texts[this.actualText].actual = false;
          this.actualText += this["do"];
          this.texts[this.actualText].actual = true;
          this["do"] = 0;
        }
      }
      if (this.inputHandler.LEFT.isPressed()) {
        if (this.actualText > 0) {
          this["do"] = -1;
        }
      } else {
        if (this["do"] === -1) {
          this.texts[this.actualText].actual = false;
          this.actualText += this["do"];
          this.texts[this.actualText].actual = true;
          this["do"] = 0;
        }
      }
      if (this.inputHandler.ENTER.isPressed()) {
        return this.game.loadLevel(this.actualText);
      }
    };

    Map.prototype.draw = function() {
      var text, _i, _len, _ref, _results;
      this.ctx.drawImage(this.mapgen.background, 0, 0, 640, 480);
      _ref = this.texts;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        text = _ref[_i];
        _results.push(text.draw(this.ctx));
      }
      return _results;
    };

    return Map;

  })();

  MapGenerator = (function() {

    function MapGenerator(data, img) {
      this.data = data;
      this.img = img;
      console.log("INIT MapGenerator");
      this.spritesheet = new SpriteSheet(this.img, 8);
      this.load();
    }

    MapGenerator.prototype.load = function() {
      var layer, props, tiles, x, y, _i, _ref, _results;
      layer = this.data.layers[0];
      props = layer.properties;
      this.background = document.createElement("canvas");
      this.background.width = this.data.width * 8;
      this.background.height = this.data.height * 8;
      this.ctx = this.background.getContext("2d");
      tiles = layer.data;
      _results = [];
      for (y = _i = 0, _ref = 15 - 1; 0 <= _ref ? _i <= _ref : _i >= _ref; y = 0 <= _ref ? ++_i : --_i) {
        _results.push((function() {
          var _j, _ref1, _results1;
          _results1 = [];
          for (x = _j = 0, _ref1 = 20 - 1; 0 <= _ref1 ? _j <= _ref1 : _j >= _ref1; x = 0 <= _ref1 ? ++_j : --_j) {
            _results1.push(this.spritesheet.drawTile(this.ctx, x * 8, y * 8, tiles[x + y * this.data.width] - 1));
          }
          return _results1;
        }).call(this));
      }
      return _results;
    };

    return MapGenerator;

  })();

  Level = (function() {

    function Level(id, world, screen, json, sheet) {
      this.id = id;
      this.screen = screen;
      console.log("INIT Level");
      this.canvas = document.getElementById(this.id);
      this.ctx = this.canvas.getContext("2d");
      this.ctx.canvas.width = WIDTH;
      this.ctx.canvas.height = HEIGHT;
      this.ctx.webkitImageSmoothingEnabled = false;
      this.ctx.mozImageSmoothingEnabled = false;
      this.level = new LevelGenerator(json, sheet, world);
      this.teste = new TestEntity(0, 0);
      this.e = new PlayerModel(world, 50, 30);
    }

    Level.prototype.tick = function() {
      this.teste.setX(this.e.getScreenX());
      return this.teste.setY(this.e.getScreenY());
    };

    Level.prototype.draw = function(xOffset, yOffset) {
      this.ctx.clearRect(0, 0, WIDTH, HEIGHT);
      this.ctx.drawImage(this.level.background, xOffset, yOffset, 128, 128, 0, 0, 640, 480);
      return this.teste.render(this.screen);
    };

    return Level;

  })();

  LevelGenerator = (function() {

    function LevelGenerator(data, img, world) {
      this.data = data;
      this.img = img;
      this.world = world;
      this.sprites = new SpriteSheet(this.img, 8);
      this.load();
    }

    LevelGenerator.prototype.load = function() {
      var i, name, _i, _ref, _results;
      this.background = document.createElement("canvas");
      this.ctx = this.background.getContext("2d");
      console.log(this.data);
      _results = [];
      for (i = _i = 0, _ref = this.data.layers.length - 1; 0 <= _ref ? _i <= _ref : _i >= _ref; i = 0 <= _ref ? ++_i : --_i) {
        name = this.data.layers[i].name;
        if (name === 'scene') {
          this.createScene(this.data, this.data.layers[i]);
        }
        if (name === 'static') {
          this.createModel(this.world, this.data.layers[i]);
        }
        if (name === 'sensors') {
          _results.push(this.createModel(this.world, this.data.layers[i]));
        } else {
          _results.push(void 0);
        }
      }
      return _results;
    };

    LevelGenerator.prototype.createScene = function(data, layer) {
      var tileheight, tiles, tilewidth, x, y, _i, _ref, _results;
      tiles = layer.data;
      tileheight = data.tileheight;
      tilewidth = data.tilewidth;
      this.background.width = data.width * tilewidth;
      this.background.height = data.height * tileheight;
      _results = [];
      for (y = _i = 0, _ref = data.height - 1; 0 <= _ref ? _i <= _ref : _i >= _ref; y = 0 <= _ref ? ++_i : --_i) {
        _results.push((function() {
          var _j, _ref1, _results1;
          _results1 = [];
          for (x = _j = 0, _ref1 = data.width - 1; 0 <= _ref1 ? _j <= _ref1 : _j >= _ref1; x = 0 <= _ref1 ? ++_j : --_j) {
            _results1.push(this.sprites.drawTile(this.ctx, x * 8, y * 8, tiles[x + y * data.width] - 1));
          }
          return _results1;
        }).call(this));
      }
      return _results;
    };

    LevelGenerator.prototype.createModel = function(world, layer) {
      var bodyDef, fixDef, i, obj, objects, p, ratio, scaleh, scalew, shape, type, x, _i, _j, _ref, _ref1, _results;
      objects = layer.objects;
      ratio = 8 * 16;
      scalew = 640 / ratio;
      scaleh = 480 / ratio;
      _results = [];
      for (i = _i = 0, _ref = objects.length - 1; 0 <= _ref ? _i <= _ref : _i >= _ref; i = 0 <= _ref ? ++_i : --_i) {
        obj = objects[i];
        console.log(obj);
        b2PolygonShape(shape = new b2PolygonShape);
        for (x = _j = 0, _ref1 = obj.polygon.length - 1; 0 <= _ref1 ? _j <= _ref1 : _j >= _ref1; x = 0 <= _ref1 ? ++_j : --_j) {
          obj.polygon[x] = {
            x: obj.polygon[x].x / 30 * scalew,
            y: obj.polygon[x].y / 30 * scaleh
          };
        }
        shape.SetAsArray(obj.polygon);
        fixDef = new b2FixtureDef;
        if (obj.properties != null) {
          p = obj.properties;
          if (p.density != null) {
            fixDef.density = p.density;
          } else {
            fixDef.density = 1;
          }
          if (p.friction != null) {
            fixDef.friction = p.friction;
          } else {
            fixDef.friction = 1;
          }
          if (p.restitution != null) {
            fixDef.restitution = p.restitution;
            console.log(p.restitution);
          } else {
            fixDef.restitution = 0;
          }
          if (p.sensor != null) {
            fixDef.isSensor = p.sensor;
          }
        }
        fixDef.shape = shape;
        bodyDef = new b2BodyDef;
        type = 0;
        if ((obj.type != null) && obj.type === 'static') {
          type = b2Body.b2_staticBody;
        } else {
          type = b2Body.b2_dynamicBody;
        }
        bodyDef.type = type;
        bodyDef.position.x = obj.x / 30 * scalew;
        bodyDef.position.y = obj.y / 30 * scaleh;
        _results.push(this.world.CreateBody(bodyDef).CreateFixture(fixDef));
      }
      return _results;
    };

    return LevelGenerator;

  })();

  Camera = (function() {

    function Camera(world, scale, screenscale, inputHandler) {
      this.world = world;
      this.scale = scale;
      this.screenscale = screenscale;
      this.inputHandler = inputHandler;
      this.tick = __bind(this.tick, this);

      this.xOffset = 0;
      this.modelScale = this.scale / this.screenscale;
    }

    Camera.prototype.getXoffset = function() {
      return this.xOffset;
    };

    Camera.prototype.setXoffset = function(xOffset) {
      this.processEntities(xOffset);
      return this.xOffset = xOffset;
    };

    Camera.prototype.tick = function() {
      var body, xNow;
      xNow = 0;
      if (this.inputHandler.RIGHT.isPressed() === true) {
        if (this.xOffset !== 128) {
          xNow = 1;
        }
      }
      if (this.inputHandler.LEFT.isPressed() === true) {
        if (this.xOffset !== 0) {
          xNow = -1;
        }
      }
      if (xNow !== 0) {
        body = this.world.GetBodyList();
        this.setBodyPosition(body, xNow, 0);
        while ((body = body.GetNext()) !== null) {
          this.setBodyPosition(body, xNow, 0);
        }
        return this.xOffset += xNow;
      }
    };

    Camera.prototype.setBodyPosition = function(body, xOffset, yOffset) {
      var newx, newy;
      newx = body.GetPosition().x - (xOffset / this.modelScale);
      newy = body.GetPosition().y - (yOffset / this.modelScale);
      return body.SetPosition(new b2Vec2(newx, newy), 0);
    };

    return Camera;

  })();

  SpriteSheet = (function() {

    function SpriteSheet(image, tilesize) {
      this.image = image;
      this.tilesize = tilesize;
      console.log("CREATED SpriteSheet");
    }

    SpriteSheet.prototype.drawTile = function(ctx, posx, posy, index) {
      var x, y, _i, _results;
      _results = [];
      for (y = _i = 0; _i <= 7; y = ++_i) {
        _results.push((function() {
          var _j, _results1;
          _results1 = [];
          for (x = _j = 0; _j <= 7; x = ++_j) {
            if ((x + y * this.tilesize) === index) {
              _results1.push(ctx.drawImage(this.image, x * this.tilesize, y * this.tilesize, this.tilesize, this.tilesize, posx, posy, this.tilesize, this.tilesize));
            } else {
              _results1.push(void 0);
            }
          }
          return _results1;
        }).call(this));
      }
      return _results;
    };

    return SpriteSheet;

  })();

  Key = (function() {

    function Key() {
      this.pressed;
    }

    Key.prototype.toggle = function(pressed) {
      return this.pressed = pressed;
    };

    Key.prototype.isPressed = function() {
      return this.pressed;
    };

    return Key;

  })();

  InputHandler = (function() {

    function InputHandler() {
      this.keyUp = __bind(this.keyUp, this);

      this.keyDown = __bind(this.keyDown, this);
      this.LEFT = new Key();
      this.RIGHT = new Key();
      this.ENTER = new Key();
      window.addEventListener("keydown", this.keyDown);
      window.addEventListener("keyup", this.keyUp);
    }

    InputHandler.prototype.keyDown = function(e) {
      var keycode;
      keycode = e.keyCode;
      if (keycode === 37) {
        this.LEFT.toggle(true);
      }
      if (keycode === 39) {
        this.RIGHT.toggle(true);
      }
      if (keycode === 13) {
        return this.ENTER.toggle(true);
      }
    };

    InputHandler.prototype.keyUp = function(e) {
      var keycode;
      keycode = e.keyCode;
      if (keycode === 37) {
        this.LEFT.toggle(false);
      }
      if (keycode === 39) {
        this.RIGHT.toggle(false);
      }
      if (keycode === 13) {
        return this.ENTER.toggle(false);
      }
    };

    return InputHandler;

  })();

  Storage = (function() {

    function Storage() {
      this.callback = __bind(this.callback, this);
      console.log("CREATE  Storage");
      this.store = new Array();
      this.counter = 0;
      this.finshed = function() {};
    }

    Storage.prototype.register = function(loader) {
      ++this.counter;
      return loader.setCallback(this.callback);
    };

    Storage.prototype.callback = function(loader) {
      --this.counter;
      this.store[loader.getName()] = loader.getRessource();
      if (this.counter === 0) {
        return this.finshed();
      }
    };

    Storage.prototype.setFinished = function(finished) {
      return this.finshed = finished;
    };

    Storage.prototype.getRessource = function(name) {
      return this.store[name];
    };

    return Storage;

  })();

  Loader = (function() {

    function Loader(path, name) {
      this.path = path;
      this.name = name;
      this.res = null;
      this.callback = function() {};
    }

    Loader.prototype.start = function() {};

    Loader.prototype.setCallback = function(callback) {
      return this.callback = callback;
    };

    Loader.prototype.getRessource = function() {
      return this.res;
    };

    Loader.prototype.getName = function() {
      return this.name;
    };

    return Loader;

  })();

  SimpleImageLoader = (function(_super) {

    __extends(SimpleImageLoader, _super);

    function SimpleImageLoader(path, name) {
      this.path = path;
      this.name = name;
      SimpleImageLoader.__super__.constructor.call(this, this.path, this.name);
      console.log("CREATE SimpleImageLoader");
    }

    SimpleImageLoader.prototype.start = function() {
      this.res = new Image();
      this.res.onLoad = this.callback(this);
      return this.res.src = this.path;
    };

    return SimpleImageLoader;

  })(Loader);

  SimpleJSONLoader = (function(_super) {

    __extends(SimpleJSONLoader, _super);

    function SimpleJSONLoader(path, name) {
      this.path = path;
      this.name = name;
      this.load = __bind(this.load, this);

      SimpleJSONLoader.__super__.constructor.call(this, this.path, this.name);
      console.log("CREATE SimpleJSONLoader");
    }

    SimpleJSONLoader.prototype.start = function() {
      return $.getJSON(this.path, this.load);
    };

    SimpleJSONLoader.prototype.load = function(data) {
      console.log("JSON Loaded");
      this.res = data;
      return this.callback(this);
    };

    return SimpleJSONLoader;

  })(Loader);

  List = (function() {

    function List() {
      this.addindex = 0;
      this.array = new Array();
    }

    List.prototype.add = function(object) {
      return this.array[this.addindex++] = object;
    };

    List.prototype.size = function() {
      return this.array.length;
    };

    List.prototype.get = function(index) {
      return this.array[index];
    };

    List.prototype.del = function(index) {
      --this.addindex;
      return this.array.splice(index, 1);
    };

    return List;

  })();

}).call(this);
